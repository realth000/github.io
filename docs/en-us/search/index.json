[["Linux技巧笔记","2023年07月07日","/en-us/2023/07/22/linux%E6%8A%80%E5%B7%A7%E7%AC%94%E8%AE%B0.html/"," 前言 好记性不如烂笔头，长期更新Linux使用日常中遇到的犄角旮旯的东西。 这里可能很多条目都写明了具体发行版，实际上很通用，不必拘泥于版本。 中文相关 Arch Wayland配置Fcitx5中文输入法 折腾了很久，各自帖子都看了，好久才完全折腾好。 Fcitx5本身没什么问题，问题在于Wayland不完善，以及各自软件使用的技术差异很大，需要各自配置。 基础配置 安装fcitx (AUR)： 系统环境变量，写入到 。 浏览器 浏览器推荐使用Firefox，不需要做额外更改就可以使用Fcitx5输入中文。 chrome需要在启动中加参数 ，并且存在输入法候选框不跟着光标的问题，此外114版本的chrome加上如上flag后会在启动时崩溃。 Intellij全家桶 配置过基础环境变量后基本可以使用，但是会有候选框不跟随光标的问题，需要更换ide的java runtime 在RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64 下载，并解压。 idea中按下 ，在弹出的对话框中选择“操作”，输入 ，更换runtime。 设置java runtime Fcitx5配置 默认配置有些地方不好用，需要改 输入中文标点 默认情况下，即使在输入中文时，打出来的标点符号也是英文的。 按下 切换到全角标点（中文标点）。 切换中英文 默认是 ，建议再加一个shift切换中英文。不然中文模式下想输入一点英文还要按两个键。 配置 -\u0026gt; 全局选项 -\u0026gt; 快捷键 -\u0026gt; 切换/禁用输入法 项。 输入中文时上屏一些英文单词 参考地址 输入中文时，按下 可以把当前这点英文上屏。 网络 Debian12同时开启多张网卡 在 中添加配置，自动连接并设置为DHCP。 "],["美好且不连续的每一天","2023年07月07日","/en-us/2023/07/17/%E7%BE%8E%E5%A5%BD%E4%B8%94%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E5%A4%A9.html/"," 前言 食言了，本来在上篇3days 中说接下来打打废萌，结果看到硬盘里躺在3days旁边的《素晴日》，忍不住开始推。 几年前也推过一点，不过顶多五分钟，仅仅试了一下而已，这次是认真玩。 2023年7月16日02:33:32存第一个档，2023年7月16日7月16日15:43:19的终之空 II的最后一个档，13个小时难忘的体验。剧情太抓人，所以没睡，一口气推下来~~，结果给孩子刀傻了，甚至还要周一请一天假缓一缓。~~ 先说评价，作为一部看介绍可知是“电波系”、“意识流”、“狂气”的作品，知道它的几个章节是分别从几个视角讲述同一个故事，从此时开始，我对《素晴日》的期待拉得非常高，又是评分极高（虽然两极分化，毕竟电波系），又是奇特的分章节，再加上电波的那种脱线感，确实是一部实打实的神作，从剧情到角色形象，从立绘到音乐，从剧本到声优演绎，基本都是满分那条线上。 虽然夹杂了很多典故，导致看起来有点看不懂，不过问题不大，咱也不是冲着哲学来的。而且打完结局再回顾的时候，这部分哲学的台词的理解深了一些，有一种“朝闻道，夕可死矣”的感受。 现在想想，带着这么高的期待还能在通关后觉得超常发挥，实在难得。 给个满分吧，体验确实很棒。我认为的其他的高分作品（诸如白2、君彼、甜蜜女友系列）感觉多多少少“有同类作品可以竞争”，其他作品也能差不多达到这个水平。可《素晴日》让我觉得，很难有第二部作品和它类似，做得了这么多，同时又可以做得这么好。 因此给个满分吧，我认为《素晴日》配。 当然，如果有其他作品可以和《素晴日》差不多，欢迎推荐，这种感受真的不可多得。 我喜欢甜作废萌，因为它们是轻松愉快的故事。而《素晴日》这种“揪心”的故事就像维生素，多少来一点，不来就人（退）没（坑）了。 本来不想写些感谢，可实在不吐不快。想在知乎上发个回答的，后来想起我不还有个博客么，姑且可以发，很久没更新，那知乎就先等等吧。 这里我就不讨论太多那些哲学方面的书籍和台词了啊，主要我不懂，现在心里堵得慌也没心情去翻台词看，不过上午姑且是把一些印象模糊的结局走了一遍。就凭印象写吧，当闲聊。 简介 故事简介如下（摘自萌娘百科 ）： 6个故事，一种旋律。 “Down the Rabbit-Hole”　——「天空与世界」的故事 某天，水上由岐看见天上掉下的毛绒玩具。 为了被天空接受而被扔出去的她的毛绒玩具，不知在空中飞舞了几次，变得破烂不堪。 「被天空接受」那是为了寻找不知何时开始在这个城市流传的「回归天空之路」的行为。 那是在世界本身的少女与天空的少女邂逅的地方才能开始实现的。 横跨天河的Vega与Altair，被称为织女星与牛郎星的两颗星星， 再加上北十字星的顶之星Deneb（天津四），被称为夏季大三角。 那是形容三位一体的圣之图形。 当圣之图形在天空闪耀之时，世界将于天空相遇。 一直在寻找那个地点的高岛ざくろ，还有若槻镜、若槻司， 加上主人公水上由岐这四个人开始了寻找天空与世界，神之三角交汇的地方的冒险。 序章与第一章通用此名，氛围却截然相反 “It’s my own Invention”　——「终结与开始」的故事 因为某个事件为契机，世界开始偏离自己的认知。 认知偏离的最后，他在世界尽头的地方发现了救赎。 充斥电波与狂气，解谜的同时又新增了更多的谜团 “Looking-glass Insects”　——「文学少女与化学少女」的故事 两个少女的战斗故事。她们使用着文学与化学与现实战斗。 文学是着强烈的意志，化学是对抗物理世界的力量。 她们只有这两样对抗现实的武器。 百合GE充满治愈却不能开启下面章节，开启下章节的BE则鬼畜黑暗，解答部分谜团 “Jabberwocky”　——「救世主与英雄」的故事 背负起身为破坏者命运的少年的故事。 他为了世界的和谐，不得不消灭创造者。 本章信息量巨大，解答部分谜团 “Which Dreamed It”　——「兄与妹」的故事 爱慕着哥哥的少女。 她坚信着与哥哥的约定，在向日葵的坡道下等候着。 本章对前几章的谜（以及各个角色的本体x）给出了解释 “JabberwockyII”　——「向日葵与坡道」的故事 遥远的世界的故事，讲述了向日葵的坡道和它尽头风景的故事。 原文里的黑幕写得也挺好，因此没有删除。 有一天，水上由岐看见了神秘的少女高岛柘（zhe 四声）榴： “这是你的玩偶吗？从那么高的地方扔下来。” “嗯，为了寻找世界所在的少女和空之少女相遇的地方。” “那是什么？” “夏之大三角，能看到这样星座的地方，飞向天空的话并不会掉下去，而是会被接受。” “那么我来陪你找吧。” 有一天，间宫卓司在教学楼楼顶看书，遇到了高岛柘榴： “想看的话这本可以借给你。” 她看上去经常一个人待着，是不是和我一样受欺负呢？ “这是我的秘密基地，只告诉你一个人哦。” 但在这后来，少年看到了少女像鸟一样飞向空中却没有像鸟一样落地。 “这，不可能！” “这样的世界，一定会被毁灭吧，就如预言所说。” “那么我就是救世主了，拯救所有人，走向终之空，就如预言所说的。” 有一天，高岛柘榴遇到了自己之前的好友橘希实香。 “笨蛋，再这么张扬又要被她们欺负了！” 有一天，高岛柘榴遇到了间宫卓司。 “就这样，从他手里借到文学的书，真好啊。” 可很快事件发生了变动： “要不要挺身而出呢？” 出，是美好但虚幻的结局；不出，则是粉身碎骨但推向终点的结局。 从那天开始，悠木皆守和水上由岐。 “那家伙总是这么镇定和逞强啊。” “看来越是想避免，就越来越靠近。” “使命什么的，她不行的话，我来终结他！” “一直以来各种事情，都麻烦你了啊。虽然咱们的关系确实不用区分得和外人一样。” 从那天开始，间宫羽咲一直看着间宫卓司。 “现在是谁呢？总是见不到他的话，有些害怕呢。” “我不要别的，只要哥哥能平安回来。” 少女一直抱着哥哥送给她的玩偶。 “至少，看看我啊，看不到了吗？” 从那天开始，这片向日葵就一直在坡道上盛开着，不论白天还是夜晚。 “向日葵和菊花相近，有点像葬礼上用的花啊。” “是吗？” “向日葵啊，虽然总是跟着太阳转，但是在找到太阳以后就不转了。” “向日葵和菊花相近，但也不像葬礼上用的花。倒不如说，坡道旁这一大片向日葵，和拥有四个叶片的三叶草一样。” 剧情 明明是同一事件，在不同当事人看来却有完全不同的样子，产生出完全不同的情感。 序章 高岛在寻找世界少女和天空少女相遇的地方，虽然那是注定要发生在某个时间的事。 世界可以以梦幻般的模样结束，也可以戳破这层泡沫走向下一个篇章。 序章开始，刀就来了。 序章的内容并不长，日常有很多，欢乐也有很多。选择镜的话可以永远留在这个世界，选择司的话不光可以留在这个世界，还能收到高岛的来信。 很梦幻吧？ 可高岛说了：“这确确实实存在的记忆，很梦幻，和梦一样，如同泡沫般一触碰就会破掉。” 高岛还说：“在这短暂的时间里，我也很快乐。” 可还是不得不走下去啊，走出这个梦。 由岐发觉自己就是世界少女，是不该存在在这世界上的。 而高岛，已经走到了列车旅途的终点。“我很高兴，虽然这些天给由岐带来了不少麻烦，可这些天的经历，真的非常高兴，谢谢由岐，再见。” 序章说了什么？由岐发觉自己某种程度上是在梦里，同时带着“回归天空”这样的理解走下去。 Down the Rabbit-Hole 标题里的兔子洞应该是说《爱丽丝梦游仙境》里进入仙境时的入口，兔子洞。虽然这个事似乎在第三章才被高岛提到。 第一章走完了事件的流程，一直到7月20日零点，期间发生的离奇事件。 以由岐的视角来看，追查这一路，最后查到是间宫卓司是罪魁祸首，而后罪魁祸首也以“回归天空失败”的形式结束。 留下了很多谜团啊，为什么镜变成了玩偶？家里和在门外遇到的那个黑色幽灵是什么？ 这一章总体感受是，中规中矩，带着残酷和黑暗，但是也中规中矩。如果把上述疑问去掉，那么第一章作为一个独立的故事其实是够格了（及格，并不优秀，因为就这么点东西）。 电波系的作品嘛，肯定有很多不按常识来的地方，这些谜团就是。 但是想想，按序章的话来说，如果这一切是梦呢？似乎都可以解释，“硬”说得通，都当成梦了肯定说得通，只是不讲道理。 但是再想想，第一章中各个地方都提示了，这个事件似乎有“轮回”的形式在，高岛不是第一次借书，彩音也不像是第一回认识的。 （未完待续） "],["3days的循环与永恒的等待","2023年07月07日","/en-us/2023/07/17/3days%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E6%B0%B8%E6%81%92%E7%9A%84%E7%AD%89%E5%BE%85.html/"," 前言 是著名的12神器之一，以猎奇、血腥的风格闻名，玩家需要在数十次死亡轮回中追寻真相。几年前处于好奇下载玩了玩，没轮回几次就受不了退坑了。前一阵子打开硬盘发现了躺在硬盘里的它。 没打完多少有点不甘心。 嗯……来吧，再来试一下！ 某乎回答 下面是写在问题如何理解游戏《3days》？中的回答 ，直接搬过来吧。 可以一玩，但是剧情前半段和后半段区别很大，不想玩第二遍，70分吧。 本来想看剧情详情，可是没找到讲解，因此自己玩了一遍。 所以写一个剧透回答吧，不想看剧透的话请跳过本回答。 刚玩完凭印象答的，可能有误（不想玩第二遍）。 （剧透分割线） 游戏类型 40%刀（物理上的）+ 40%魔幻 + 20%刀（剧情上的）。 登场人物 成梨亮：男主，前半段游戏的主视角，普通高中生。 藤见环：女主，亮的青梅，和亮一个班，很喜欢亮。 草壁辽一：男主，后半段游戏中出现，家族代代是几大魔法师（原文是“术者”，这里简单理解为魔法师）家族之一，但是家族这一脉的魔法比较烂。被逐出家门，到了一个“非正常人类收容所”一样的研究所工作，魔法实力很强。 柊美柚：女主，表面是比亮高年级的学姐，本身是由四大魔法元素组成的“人偶”，没有寿命的概念，和辽一约定了要一起度过一生。 吾妻梨花：女主之一，身上有伤的谜之少女，和亮、环在同一所学校上学。有一个哥哥叫吾妻友哉，哥哥在十五年前的大规模杀人事件中死了。 吾妻瑠花：梨花的亲妹妹，年纪小很多，经常在公园玩。 广原月子：电波系配角，对魔法感兴趣。 千神奈奈子：差不多是路人角色，美柚的同班同学，和美柚关系很好。 瓦尔塔：反派，德国的魔法师，擅长西方和东方的魔法，实力极强，是某个秘密称霸世界的七人组织的成员，有着一人主宰世界的野心。 道具 卡洛斯怀表：卡洛斯怀表控制的时间是“更高维度的时间”，所有时间均是一段段“永恒”，大概理解成可以跳转和控制时间并且不会产生“时间上的新分支的世界”（和9nine相比）的道具即可。 翠玉碑碎片：可以为魔法师提供无穷无尽的魔力的魔力碎片，无法摧毁。 冥王之键：保存在梵蒂冈的禁书图书馆的记载了黑暗魔法的魔法书。 以上三件道具是瓦尔塔称霸世界所必需的。 剧情 一千多年前 大魔法师西蒙制造了一个由四大魔法元素组成的人偶（由魔法制作成的人工灵魂），本意似乎是为了“替代”自己的情人，但在为人偶取名的阶段失败了。人偶一直藏在德国的黑森林里，有意识但是没有乱跑。 由于是由魔法元素组成的，人偶没有寿命限制，拥有极强的操控魔法的能力，并且可以将自己的身体作为魔法燃料施展出魔法，这种方法用多了会导致死亡，不过不用的话属于不老不死之身。 几十年前的二战时期 德国的魔法师瓦尔塔发现了西蒙隐藏在黑森林里的城堡和城堡里的人偶，一并发现的还有一件魔法神器：卡洛斯怀表。瓦尔塔发觉只有整个人偶可以控制卡洛斯怀表，然而人偶并不搭理瓦尔塔。 瓦尔塔打算表面上以卡洛斯怀表和人偶为条件，和日本的魔法机构交换翠玉碑碎片。为什么说打算呢？因为只有人偶能控制卡洛斯，而人偶哪怕是连瓦尔塔这个无比强的魔法师都不搭理，这两样完全是花瓶而已。 因此卡洛斯怀表和人偶被瓦尔塔到达了辽一所在的研究院，由研究院藏在地下。研究院开展了一些研究然而并没研究出什么东西。 人偶表面上还是需要人来看管，辽一是负责看管的人之一，和人偶慢慢接触的过程中辽一发现了以下了几个结论： 人偶魔法实力很强，可以轻易破开瓦尔塔施加的限制魔法。 然而人偶并不想突破枷锁去外面。 人偶不会说话。 辽一由“魔法是和语言紧密联系在一起的”联想到人偶是否是缺少了名字而丧失了语言能力呢？便为人偶取了一个名字：美柚。人偶获得人名后，和辽一互动多了起来。之后两人互表爱意，约定今生今世要在一起。 虽然瓦尔塔也给人偶取了名“娜露蕾斯（nameless）”，但由于瓦尔塔是个只以自我为中心的“不需要外人”的人，人偶并不搭理瓦尔塔。 找到机会后，辽一带着美柚想逃出研究院，可是这个机会正是瓦尔塔的袭击。此时的瓦尔塔已经拥有了翠玉碑碎片和冥王之键，离称霸世界只差临门一脚的卡洛斯怀表（和能控制怀表的美柚）。 大战一触即发，瓦尔塔把辽一和美柚拉进了自己的压抑了四大元素的结界。此处战斗对于辽一和美柚极为不利，最终辽一依靠计谋隐藏设下的自爆阵法将瓦尔塔几乎打死。 说是几乎是因为瓦尔塔此时有保留灵魂和将灵魂附身到生物身上的能力，并没有完全死。 辽一则是靠很久以前设下的一生只能用一次的“冥外转生”术可以将自己的灵魂转生一次。 辽一在弥留之际，让美柚把翠玉碑碎片（和冥王之键，似乎是，记不清了）扔进卡洛斯怀表创造的时间漩涡中，防止再次有人妄图收集三大齐道具称霸世界。 最后辽一和美柚约定好了，无论是几百几千年，美柚都要等着辽一团聚。 十五年前 瓦尔塔通过在不同的动物身上，通过杀人献祭慢慢恢复魔力，苟延残喘，在游戏时间的十五年前寄生到了成梨亮的身上，引发了大量杀人事件，包括将亮的父母杀害，拿心脏当作冥王之键的供品。 此时，辽一的灵魂转生成了吾妻梨花的哥哥吾妻友哉，并和美柚相认。 然而相聚非常短暂，辽一转生成功时瓦尔塔已经开始了杀戮，辽一和美柚很酷又与瓦尔塔决战。 此次决战依然被瓦尔塔拉进了他的结界，辽一施展出家族传承的百鬼百刃魔法战甲，艰难战胜瓦尔塔后也被瓦尔塔自制的克制魔法的子弹打成身体和灵魂均重伤的状态。 美柚决定靠卡洛斯怀表、自己的一部分灵魂、成梨亮的身体来挽留辽一，避免辽一死亡。 事件过后，在现场的亮年纪很小，并没有被当成嫌疑人。 现在 回到现在，瓦尔塔依然没死，寄生在吾妻梨花身上，并且拥有冥王之键。梨花能感觉到自己身体的异样，晚上经常有杀人的噩梦，因此梨花不得不采取自残的手段，以至于在精神即将崩溃时从教学楼楼顶跳下自杀。 美柚表面是学生，实际上背地依然在调查瓦尔塔的情况同时等待着辽一回来。 瓦尔塔的魔力一天天恢复，同时他还发现心心念念的翠玉碑碎片就在环的身上，于是频频在18号晚上袭击环，同时会顺带带走一旁的亮。在16号早上（或者说15号晚上），瓦尔塔会杀害美柚，造成游戏开头的事件。 亮体内有卡洛斯怀表，卡洛斯在亮将死之时会将时间回拨到三天前的16号早上，但同时也会把回退的这部分记忆消除。然而亮在一次次时间回溯中可以逐渐保留一部分记忆，这会对他的身体造成很大负担，虽然这不是他能控制的，他也不知道这种“预知”有何意义。 亮随着逐渐调查案件，打开了“真实之门”，看到了十五年前和几十年前的两次大战，思索之后发现了真相。同时他可以在时间回溯时完整地保留记忆，代价是不能再回溯几次了，对身体负担太大。 此时亮想到了一件事：如果时间回溯不是回溯到固定的16号，而是回到三天前，想到这里他从楼顶跳下，并且成功回到了15号美柚没死的时候。 由于亮的行动的干扰，瓦尔塔虽然还是以袭击环夺取翠玉碑碎片为目标，但行动时间提前到了17号早上的上学路，被亮和美柚击退。之后瓦尔塔附身在月子身上，中途被识破又靠操纵死尸假死。 直到晚上，主角团以为瓦尔塔已经被彻底打败，在美柚的家里商量今后的时候，并且因为美柚对辽一的感情和环对辽一的感情产生冲突时，瓦尔塔以月子的身份带走了环，杀害月子，转而附身到环身上。 最后一次大战开启，面对再次拥有翠玉碑碎片和冥王之键的瓦尔塔，最后一刻的亮利用卡洛斯怀表发动时间回溯，回溯到了当晚主角团还在美柚家楼下的时候，使出上次大战中没施放成功的封印咒术，瓦尔塔转移到亮的身上，亮依靠封印咒术和自杀彻底消灭了瓦尔塔的灵魂，然而自己也快死了。美柚和环将卡洛斯怀表和翠玉碑碎片的力量合起来，跨越时间，创造“亮所希望的世界”。 结局 此后，根据此前的行动： 亮在得知真相后认为自己的身份是？草壁辽一/成梨亮/吾妻友哉 和美柚相认后是否抱了美柚？ 将分成以下结局： 美柚end 1选草壁辽一即可。此结局中，辽一几乎抹除了成梨亮的存在： 亮的姐姐在早上习惯性地做了两人份的饭，并且想叫亮起床，突然发现好像没有“亮”这个人，嘟囔着“一个人住这么大房子有些空呢”，“差不多该想着结婚了吧，开玩笑” 环每天早上的morning call变成给月子打，并且习惯性地去找亮，路上遇到了辽一和美柚，“诶，那个人？？” 环到了亮的家楼下，发觉不知道为什么想来这里，开始不自觉地流泪，打开手机发现了亮的通讯方式：“为什么通讯录里有不认识的人？”，随着打电话的呼叫声响起，游戏结束。 环end 1选成梨亮即可。此结局中，自然是和环在一起。 环和亮在上学路上遇到了美柚。 亮心想：那个人好漂亮啊。 环：认识的人？ 亮：不认识。 在环和亮亲热的时候，美柚默默地拿着一束花（应该是柚子相关的），走过辽一的家的楼下，走过上学路，走过公园：“为什么，为什么不肯将我消除呢？没有辽一的世界不是我想要的世界。再见了，辽”，美柚选择了消失。 梨花end 1选吾妻友哉，并且后续选择不抱美柚即可。在此结局中，友哉和梨花、瑠花在公园玩。 环和月子关系依然很好，环应该是彻底不知道亮， 回家路上，看到了环， “为什么心里这么难受（还哭了）呢？明明是不认识的人，明明和梨花和瑠花还有父母生活这么幸福”。 后宫？end 1选吾妻友哉，并且后续选择抱美柚。此结局中最后主角的身份是亮（不是友哉）。 此结局比较像安慰玩家的结局，和月子和环关系很好，美柚也在。在即将向奈奈子告白时，美柚故意过来抢跑并且亲了辽一，随后环和月子也来搅局。 此外还有几个结局： 得知真相后，可以和环选择逃跑，远走天涯。故事最后没说，但是从瓦尔塔称霸世界的野心来看，100%是悲剧。 可以选择不跳楼，而是去杀掉梨花，然而并没有什么卵用，梨花只是被附身，最后瓦尔塔转移到亮的身上就再次悲剧。 最后决战时，面对附身到环身上的瓦尔塔，可以选择不战斗，之后会类似诈降，和瓦尔塔同归于尽，大约的确是死了。 剧透结束，其实故事挺好，不过存在几个问题： 在打开真实之门前，半点魔法的展开都没有，换着花样死。和打开门后的魔幻风大相径庭，体验非常割裂。 开门前的路程太长了，即使ctrl也太长了，我不得不ctrl去碰运气，然后看攻略是哪里漏了。开门后的几十年前的故事太长了，几乎忘了这是个什么游戏。开门前环的剧情是100%，开门后告诉我美柚是天降“青梅”，环的戏份几乎没了？？ 我这里的游戏版本可能比较老，没有路线图，还有闪退问题，总体体验不太好。 最后还有刀，不过不算问题吧，而且安排了一个“后宫”结局，让玩家笑一笑，轻松一下。 今天是15号，正是游戏里剧情开始的前一天，也是开始扭转乾坤的一天，冥冥之中也算天意？ 从个人感觉看，和FSN的很像，白天日常，晚上打架，同样带着不知道干嘛随便碰运气的心情，带着不知道这次怎么死的觉悟玩。 论猎奇和剧情，比不上euphoria，不过也不是一个时间的作品，这么比很马后炮就是了。 压迫感管够，euphoria和死馆玩得下来，这种真不行。几年前试着玩过一次，没轮回两次就受不了被劝退了，最近看到硬盘里存着又捡起来玩，前半段经常ctrl，果咩捏。 PS1：直到最后梨花线，才发现梨花的CV和前些天玩的アマナツ里的和叶一样，跨越了近二十年时间的两部作品，近期才认识这位老前辈，马达果咩捏。 PS2：瓦尔塔的CV感觉和服部平次好像啊，真的好像啊，不过查了查似乎不是同一位。 PS3：从漫长的ctrl过程中我学到了一件事：还是废萌/甜作适合老子，不玩猎奇作了。 感想 又是一个不得圆满的故事。等待了上千年的美柚，等待了十多年的幼驯染环，似乎必须二选一，让其中一人获得幸福，另一人注定带着遗憾走过余生。 和《君彼》中心碎但又不得不走出的一步多么像。 可是，对于拥有无尽生命的美柚来说并没有“余生”。等待也并不能用时间来衡量：上千年是届不到，十多年也是届不到。 在美柚的结局里，环几乎忘了亮，眼泪止不住，不停地拨打亮的电话，游戏在电话呼叫中结束。 在环的结局里，美柚只能漫步在各处，虽然只在此地待了十五年，可这个地方有着辽一的足迹，现存的唯一的足迹。最后心灰意冷，放弃了存在。 后宫？结局一半是给玩家圆梦，创造一个没有人受伤的世界，另一半则是在伤口上撒盐：看吧，这么虚幻、遥远的美好结局，让玩家带着眼泪笑出来，笑完了继续流眼泪。 相比前半程的血腥和后半段的魔幻，最后的这个结局更显得感动。有一部分剧本没写好的原因，另一部分原因就是：作品的结局一定是最让人感动的部分。3days确实做到了，尽管不会再去玩，再也不会体验前半程的绝望和后半程的煎熬，它确实是个值得一玩的游戏，在人生的旅途中，陪了两站就下车了。 坐在座位上向后看，说出的不是“再见”或者“永别”，而是：老朋友，以后也要好好的啊。 再见了，美柚 "],["localsend源码学习（一） - 介绍","2023年02月02日","/en-us/2023/02/18/localsend%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%80-%E4%BB%8B%E7%BB%8D.html/"," 介绍 localsend 是一款开源的跨平台局域网文件/消息投送软件，只要在连上相同WIFI的设备上开启localsend客户端，即可方便地在设备间传送文件，具有以下特点： 跨平台，支持Windows，Linux，Android等平台。 支持HTTPS，端到端加密。 不需要连接到互联或第三方服务器，P2P的文件/消息传送。 正好满足我的需要，而且是Flutter编写的，自然有兴趣学习一下。 实际上本来正在拿flutter写一个很类似的软件呢，写了一半发现人家的好用就直接用上了。 项目组成 按照README中的提示，克隆git repo后通过 生成代码，然后开始阅读项目。 目录数量还好，总代码量（算上生成的）不到两万三千行，flutter的行数嘛懂得都懂，不算太多。 依赖的包不少，重要的包分下类： 状态管理：flutter_riverpod 路由管理：routerino 网络服务：dio, shelf 国际化：slang 代码生成：freezed, build_runner 代码生成用的两个包比较陌生，之前没用过代码生成，本系列重点学习一下。riverpod刚接触过，思想和用法还不顺手，dio之前用过，shelf之前用的时候觉得不好用，用go做了个服务器当替代方案，国际化的slang没用过，整个学下来能收获不少呀。 依赖介绍 riverpod：一个状态管理包，在能方便地access状态的同时保证好写测试，算provider的升级版，同一个作者开发。半个老朋友，前段时间刚从getx切到riverpod，各种概念比较迷糊，用起来也不熟练。从这个项目看来riverpod的流行度也不算低啊。比较好奇的是，竟然用的是flutter_riverpod而不是hook_riverpod，难道没有在 之外用过state吗？虽然之前文章说了选flutter_riverpod，但是用的时候如果脱离了flutter那一套（即没有ref），那么再使用state的时候需要用 ，留个意看看localsend如何做到的。 routerino：官方介绍：在声明对应关系且不适用build_runner的情况下使用命名路由。目前没看出和go_router或者getx相比有什么优势，以后仔细看看。 dio：http client包，同类型中使用最广泛的。之前写类似软件的时候用了，简单好用。 shelf：http server包，dart目前偏向客户端，像shelf这样用于服务端的包比较少，shelf是其中使用较多的。之前也考虑过直接拿dart写http服务器，后来觉得不够靠谱就拿go做了server。 freezed：依靠代码生成，简单地制作出“数据类”，kotlin里好像有这个概念，data class，这个类就是个数据组合，类似结构体。freezed提供了 `方法，且可支持序列化/反序列化，功能挺强的。 build_runner：flutter官方推出的代码生成工具，很多包都依赖它。 功能介绍 localsend提供了哪些功能呢？ 局域网文件/消息发送。 局域网内设备发现，默认每个客户端提供一个ID用于识别，也可以手动指定IP。 默认状态下接收端收文件需要点确定，也提供不需要确定的快速下载模式供服务端场景使用。 可以更改下载目录，有下载历史。 默认开启SSL，可以关闭。 有托盘图标，可以驻留后台。 支持开机自启。 支持更换端口。 支持多种语言。 基本上和我想做的局域网流转软件一模一样，我放弃我自己做那个了，正好通过localsend学习flutter，只会getx那一套并不行，很多包使用的时候需要statefulwidget，这种场景和getx并不契合。 这篇文章稍微水了点，主要介绍一下localsend，下一期从具体角度分析下localsend的源码。 本来早就想写，这一周因为某些奇怪的无可奈何的原因没弄成，还过得很不舒坦，今天算好了一些，希望今后不再出这种问题吧。 "],["简单学习riverpod","2023年02月02日","/en-us/2023/02/05/%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0riverpod.html/"," “在短暂的 `学习中我意识到一件事，越是追求简单越是有报错。” “说人话。” “我不用getx 做状态管理了，jojo！” 为何不用 ` `就能控制好状态管理，对于不想写state的新手来说真是新手福音。同时还有很强的性能：只在数值更新且变化时更新少量组件。 那么为什么不用 `呢？ State算 `更新很少了（有可能是没bug，但是也没feature啊）。 使用 `。实际使用中，这个错误并不少，容易触发。我好菜啊。 `就能获取甚至操作绑定的数据，容易出错，而且写多了很乱。我个人觉得这个地方需要加以限制，不能太随意，本来菜鸡写得就随意，这下更乱了。 介绍 Riverpod 是一款提供数据缓存和数据绑定功能的库，由Provider 的作者开发，作为 `已经用得太广泛了。 官方小彩蛋： `单词重新排列顺序后形成的。 `具有以下特点： 报错出现在编译期而不是运行期。 不需要嵌套监听和绑定的对象。 保证代码可测试。 根据官网 的介绍， `一共由三个版本： `的场景。 `的场景。 `。 嗯……反正用第二个就对了。 极速开始 完整代码： 老朋友， `的主要改动点如下： `。 `参数。 `里面。 原本显示 `。 按下按钮后原本的 `。 看来 `。 需要绑定的数值包在 `做操作。 那么 `“这个位置看好了，数值变了的话记得更新”。 同时也能看出来， `必须相邻传递的限制，同时也可以方便地遵守各种层级暴露关系，思路不容易乱。 性能也不错，上文代码中更改的部分只有 `最极限小的更新范围。 所以嘛，用上去不比 `麻烦多少。 当然，路由管理什么的还是可以用 `，如果没有其他好用的路由管理包的话。 "],["智能的命令","2023年01月01日","/en-us/2023/01/20/%E6%99%BA%E8%83%BD%E7%9A%84%E5%91%BD%E4%BB%A4.html/"," 智能的命令也不会遇到兔女郎学姐。 智能 智能的命令会给使用者带来更好的体验，比如不小心输入错参数时可以提示相似的正确参数、提供更易用的参数等等。举个例子： git 那么git是怎么做的呢？源码面前，了无秘密，直接一手clone: 1 git clone https://github.com/git/git.git --depth=1 然后 `： 1 2 3 cd git cd po nvim zh_CN.po 搜索 `函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # po/zh_CN.po 3 #: help.c 2 #, c-format 1 msgid \u0026#34;git: \u0026#39;%s\u0026#39; is not a git command. See \u0026#39;git --help\u0026#39;.\u0026#34; 20201 msgstr \u0026#34;git：\u0026#39;%s\u0026#39; 不是一个 git 命令。参见 \u0026#39;git --help\u0026#39;。\u0026#34; # help.c 597 const char *help_unknown_cmd(const char *cmd) 1 { ... 17 18 if (autocorrect == AUTOCORRECT_NEVER) { 19 fprintf_ln(stderr, _(\u0026#34;git: \u0026#39;%s\u0026#39; is not a git command. See \u0026#39;git --help\u0026#39; .\u0026#34;), cmd); 20 exit(1); 21 } 用 `文件夹里，八成不是，先忽略。查看另一处调用的位置。 1 2 3 4 5 6 7 8 9 10 11 12 ✿ grep -rn help_unknown_cmd help.c:597:const char *help_unknown_cmd(const char *cmd) git.c:909: cmd = argv[0] = help_unknown_cmd(cmd); builtin/help.c:589: return help_unknown_cmd(cmd); help.h:33:const char *help_unknown_cmd(const char *cmd); # git.c 1 if (!done_help) { 909 cmd = argv[0] = help_unknown_cmd(cmd); 1 done_help = 1; 2 } else 3 break; 好像不太对，直接找刚才的提示吧。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ✿ grep -rn -a5 \u0026#34;最相似\u0026#34; po/zh_CN.po-20231-msgid_plural \u0026#34;\u0026#34; po/zh_CN.po-20232-\u0026#34;\\n\u0026#34; po/zh_CN.po-20233-\u0026#34;The most similar commands are\u0026#34; po/zh_CN.po-20234-msgstr[0] \u0026#34;\u0026#34; po/zh_CN.po-20235-\u0026#34;\\n\u0026#34; po/zh_CN.po:20236:\u0026#34;最相似的命令是\u0026#34; po/zh_CN.po-20237-msgstr[1] \u0026#34;\u0026#34; po/zh_CN.po-20238-\u0026#34;\\n\u0026#34; po/zh_CN.po:20239:\u0026#34;最相似的命令是\u0026#34; po/zh_CN.po-20240- po/zh_CN.po-20241-#: help.c po/zh_CN.po-20242-msgid \u0026#34;git version [--build-options]\u0026#34; po/zh_CN.po-20243-msgstr \u0026#34;git version [--build-options]\u0026#34; po/zh_CN.po-20244- ✿ grep -rn \u0026#39;The most similar commands ar\u0026#39; *.c help.c:718: \u0026#34;\\nThe most similar commands are\u0026#34;, 还是 `里，打开看： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 /* This abuses cmdname-\u0026gt;len for levenshtein distance */ for (i = 0, n = 0; i \u0026lt; main_cmds.cnt; i++) { int cmp = 0; /* avoid compiler stupidity */ const char *candidate = main_cmds.names[i]-\u0026gt;name; /* * An exact match means we have the command, but * for some reason exec\u0026#39;ing it gave us ENOENT; probably * it\u0026#39;s a bad interpreter in the #! line. */ if (!strcmp(candidate, cmd)) die(_(bad_interpreter_advice), cmd, cmd); /* Does the candidate appear in common_cmds list? */ while (common_cmds[n].name \u0026amp;\u0026amp; (cmp = strcmp(common_cmds[n].name, candidate)) \u0026lt; 0) n++; if (common_cmds[n].name \u0026amp;\u0026amp; !cmp) { /* Yes, this is one of the common commands */ n++; /* use the entry from common_cmds[] */ if (starts_with(candidate, cmd)) { /* Give prefix match a very good score */ main_cmds.names[i]-\u0026gt;len = 0; continue; } } main_cmds.names[i]-\u0026gt;len = levenshtein(cmd, candidate, 0, 2, 1, 3) + 1; } FREE_AND_NULL(common_cmds); QSORT(main_cmds.names, main_cmds.cnt, levenshtein_compare); if (!main_cmds.cnt) die(_(\u0026#34;Uh oh. Your system reports no Git commands at all.\u0026#34;)); /* skip and count prefix matches */ for (n = 0; n \u0026lt; main_cmds.cnt \u0026amp;\u0026amp; !main_cmds.names[n]-\u0026gt;len; n++) ; /* still counting */ if (main_cmds.cnt \u0026lt;= n) { /* prefix matches with everything? that is too ambiguous */ best_similarity = SIMILARITY_FLOOR + 1; } else { /* count all the most similar ones */ for (best_similarity = main_cmds.names[n++]-\u0026gt;len; (n \u0026lt; main_cmds.cnt \u0026amp;\u0026amp; best_similarity == main_cmds.names[n]-\u0026gt;len); n++) ; /* still counting */ } if (autocorrect \u0026amp;\u0026amp; n == 1 \u0026amp;\u0026amp; SIMILAR_ENOUGH(best_similarity)) { const char *assumed = main_cmds.names[0]-\u0026gt;name; main_cmds.names[0] = NULL; clean_cmdnames(\u0026amp;main_cmds); fprintf_ln(stderr, _(\u0026#34;WARNING: You called a Git command named \u0026#39;%s\u0026#39;, \u0026#34; \u0026#34;which does not exist.\u0026#34;), cmd); if (autocorrect == AUTOCORRECT_IMMEDIATELY) fprintf_ln(stderr, _(\u0026#34;Continuing under the assumption that \u0026#34; \u0026#34;you meant \u0026#39;%s\u0026#39;.\u0026#34;), assumed); else if (autocorrect == AUTOCORRECT_PROMPT) { char *answer; struct strbuf msg = STRBUF_INIT; strbuf_addf(\u0026amp;msg, _(\u0026#34;Run \u0026#39;%s\u0026#39; instead [y/N]? \u0026#34;), assumed); answer = git_prompt(msg.buf, PROMPT_ECHO); strbuf_release(\u0026amp;msg); if (!(starts_with(answer, \u0026#34;y\u0026#34;) || starts_with(answer, \u0026#34;Y\u0026#34;))) exit(1); } else { fprintf_ln(stderr, _(\u0026#34;Continuing in %0.1f seconds, \u0026#34; \u0026#34;assuming that you meant \u0026#39;%s\u0026#39;.\u0026#34;), (float)autocorrect/10.0, assumed); sleep_millisec(autocorrect * 100); } return assumed; } fprintf_ln(stderr, _(\u0026#34;git: \u0026#39;%s\u0026#39; is not a git command. See \u0026#39;git --help\u0026#39;.\u0026#34;), cmd); if (SIMILAR_ENOUGH(best_similarity)) { fprintf_ln(stderr, Q_(\u0026#34;\\nThe most similar command is\u0026#34;, \u0026#34;\\nThe most similar commands are\u0026#34;, n)); for (i = 0; i \u0026lt; n; i++) fprintf(stderr, \u0026#34;\\t%s\\n\u0026#34;, main_cmds.names[i]-\u0026gt;name); } exit(1); 似乎有点长，有个关键词：levenshtein distance，算半个老朋友嘛how old are you?。 我记得，用一句话概括这个算法就是： 有两个字符串A和B，每次只增加/删除/修改A的一个字（或者字母，标点符号），需要多少次能把A改成B，这个次数就是A和B之间的距离。 `时使用的index。 先手动查，如果是已知命令，那就把对应距离改成0。否则计算逻辑距离。 计算逻辑距离： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # levenshtein.c int levenshtein(const char *string1, const char *string2, int w, int s, int a, int d) { int len1 = strlen(string1), len2 = strlen(string2); int *row0, *row1, *row2; int i, j; ALLOC_ARRAY(row0, len2 + 1); ALLOC_ARRAY(row1, len2 + 1); ALLOC_ARRAY(row2, len2 + 1); for (j = 0; j \u0026lt;= len2; j++) row1[j] = j * a; for (i = 0; i \u0026lt; len1; i++) { int *dummy; row2[0] = (i + 1) * d; for (j = 0; j \u0026lt; len2; j++) { /* substitution */ row2[j + 1] = row1[j] + s * (string1[i] != string2[j]); /* swap */ if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0 \u0026amp;\u0026amp; string1[i - 1] == string2[j] \u0026amp;\u0026amp; string1[i] == string2[j - 1] \u0026amp;\u0026amp; row2[j + 1] \u0026gt; row0[j - 1] + w) row2[j + 1] = row0[j - 1] + w; /* deletion */ if (row2[j + 1] \u0026gt; row1[j + 1] + d) row2[j + 1] = row1[j + 1] + d; /* insertion */ if (row2[j + 1] \u0026gt; row2[j] + a) row2[j + 1] = row2[j] + a; } dummy = row0; row0 = row1; row1 = row2; row2 = dummy; } i = row1[len2]; free(row0); free(row1); free(row2); return i; } 记录一下，以后可以借鉴（不是）。 shutdown 我记得 `这种单词，刚才试了试怎么不认识。不能是我记错了吧？ 查了查似乎 `命令可以这样玩，下次再写吧。 一定是我太困了，该睡了，晚安。 "],["Qt多语言翻译（国际化）","2023年01月01日","/en-us/2023/01/12/qt%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91%E5%9B%BD%E9%99%85%E5%8C%96.html/","如果想支持多语言，也就是添加翻译，需要使用qlinguist相关的内容。 在qt中实现的大体流程为：根据源代码生成 `文件（翻译文件）。 源码中所有希望添加进翻译文件的字符串都需要使用 `包裹。 由于与涉及到不同的build system以及 `文件的加载方式，具体的实现方法非常乱。 梳理花了很大一番功夫。 以下学习过程基于flameshot 和qBittorrent 两个项目。 由于缺包等原因，我本地的环境没法编译qBittorrent工程，仅看源码来学习。 实现方式 翻译文件的加载方式 在翻译文件 `的加载方式上，有两个选择： 可以选择把文件单独放到一个文件夹（如 `）。 也可以选择放进资源文件 `）。 前者的好处是翻译文件独立，修改翻译文件时不需要重新编译程序，坏处是翻译文件暴露在外，可能会遇到丢失、乱码等情况。更常见的情况是修改并生成文件后，忘了把新版的文件放到 `文件夹里。 后者的好处是可以使用qrc资源系统控制，不暴露在外，只要重新生成即可不需要手动放到translation文件夹，坏处是一旦修改文件就需要重新编译程序，而且包含所有翻译语言的翻译文件的话程序体积会略微大一点。 两套构建系统对翻译文件的处理 CMake 在CMake里，如果想加载翻译文件，需要 `模块： 幸运的是 `模块不是一个单独的动态库，应该是包含在Qt5Core内的。 生成并加载翻译文件需要使用 `打开。 QMake QMake需要使用Qt的 `文件，其实CMake底层也是调用的这个工具。 加载翻译文件需要用INSTALLATIONS变量 += 上所有的 `文件。 希望尽可能的自动化 编译过程需要手动操作的话非常恶星，总是希望整个构建过程能自动化就自动化。 需要自动化的点有： 自动根据 `。 自动加载 `能自动放在需要它的位置上，同时还包括程序加载翻译文件时选择当前系统语言。当然也可以加一个选择语言的配置，但能够选择性的加载翻译文件同样是必须的。 两个示例项目做了什么 flameshot flameshot 只支持CMake构建，对翻译文件的整个处理也比较简单。 在 `： 紧接着生成翻译文件： 根据 `本身只是一个手动控制的开关： 最后安装翻译文件到指定位置： 加载翻译文件的方式如下： 用了两个translator，一个加载Qt自带语句的翻译，一个是加载项目自己加入的需要的翻译。 qBittorrent qBittorrent 同时支持使用QMake和Cmake构建，对翻译的处理较为复杂。 CMake 在 `文件并生成翻译文件： `是qBittorrent自定义的一个函数，反正非常复杂就对了，杀鸡焉用牛刀，撤。 QMake 在 `中，仅有以下几行代码即可： 最前面的一个大的if来设定生成翻译文件所用的 `两个变量。 非常简单明了。 最终实现 选择的实现方法 尽量想同时用QMake和CMake支持加载翻译文件，毕竟QMake有时候还挺好用，你Qt6的QMake停止更新关我Qt5的用户什么事。 选择将翻译文件放到 `文件里写自定义命令的方式安装到translation文件夹里，调用起来也麻烦。 预备工作 首次生成翻译文件时，我们是连 `： 在源码里配置好想加入翻译文件的文本，包括 `包裹。 在 `文件里加上qBittorrent里翻译文件相关的配置 打开Qt自带的命令行，在这个命令行里才能用 `一下就行）。 使用 `。 用文本编辑器打开 `。 在打开刚出的命令行，用 `。 新建一个qrc文件（如 `也可以加进去，不加也行但要记得加进git仓库。 CMake 在有 `添加进编译的目标程序内（格式不支持）： 注意： 以上语句需要在 `添加了qrc文件之前。 `设置的输出目录必须是qrc文件内记录的qm文件目录，否则生成时无法更新qrc文件内包含的翻译。 之后在 `时加上生成的翻译文件： 别忘了讲qrc文件加进来，并且打开AUTORCC开关： QMake `文件里加入以下配置： 完事了，非常简单。 加载翻译文件 在 `之前，一般在main.cpp里： 我只制作了中文和英文两种翻译所以switch只有两条分支。 `需要在声明application之后。 "],["CMake实践记录","2023年01月01日","/en-us/2023/01/10/cmake%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95.html/","作为一门比shell的语法还x疼的“语言”，不动动笔杆子真不行。 以下基本以flameshot 为例来学习。 覆盖掉CMakeCache中缓存的option 不推荐使用 `，因为更改option状态时会被CMakeCache里的旧Option状态覆盖，且对subdirectory内的CMakeLists.txt作用效果不好。 推荐做法： `： OPTION_NAME：option名称。 OPTION_STATE：option状态，一般为 `，推荐使用全大写。 CACHE：表示写入到CMakeCache里。 FORCE：表示强制覆盖CMakeCache里的值。 CMakeLists.txt内添加编译时变量 语法： ` 例如MSVC开启强制utf-8： 题外话，对应的在QMake内开启的方法为在 `内添加： 添加宏（MARCO） 语法： ` 相当于编译时有了宏MARCO_NAME。 那么如何把宏去掉呢？ ` include、output、link的顺序 先 `。 CMake使用Qt5库 需要按以下几步走。 打开额外Compiler开关 分别编译Qt的元对象系统（信号槽，或者说使用了 `。 设定CMake的Modules 在尽量开头的位置设置 `到Qt自带的cmake目录，如： ` 实际操作过程中推荐这样写： ` 并在执行 `下： ` （Windows下，使用QtCreator不需要 `） 检查Qt库(CMake modules)的安装情况 以使用QtCore、QtGui、QtWidgets为例，设定了 `后： ` PS：似乎还有一种语法： ` 链接Qt动态库 基本在最后位置： ` 上面的语句默认链接debug版本的动态库，若要链接release版本，增加 ` ` 包含子目录 在上层目录中，首先 ` 在子目录 ` target_sources的用法 `（前提是相关Compiler已打开）。 区分系统平台 立即推： QtCreator中could not load cache的解决方法 可怜的qtc，bug满身，对Qml而言是，对CMake更是。 现在还坚持用qtc的原因只有方便看文档和上色丰富简单又好看了吧。 清除-重新构建后总是报错：could not load cache怎么办？ 找到左边项目-CMake- `，点一下即可重新编译。 Windows平台rc文件的使用 使用 `添加即可。 注意：编码格式在设置了UTF-8以后无比不要用UTF-8-BOM，否则在编译时会报错。 关于 `文件的格式，参考flameshot.rc Windows平台关闭控制台 使用 `参数： ` 解决Cannot find source file: main.cpp 目录结构如下： CMakeLists一层一层add_subdirectory。 `时报错：Cannot find source file: main.cpp。 意外发现将CMake最低要求版本 `设置到\u0026gt;=3.13，qtc默认给的是3.5。 题外话：直接在文件夹里cmake .没有这个报错，所以……彩鸡qtc。 "],["配置neovim","2023年01月01日","/en-us/2023/01/09/%E9%85%8D%E7%BD%AEneovim.html/"," 配置neovim neovim 是一款强大且轻量的基于vim的tui编辑器，相比vim有更现代的设置和插件系统。今天neovim的生态已然非常广泛。 安装neovim Linux neovim release page 上提供了*.deb和*.tar.gz，安装非常方便。 不推荐通过 `等包管理软件安装neovim，版本太老。 Windows release page上提供了Windows可用的*.zip，使用Qt制作了GUI。 然而GUI太不vim了，想在Linux的shell里使用vim怎么办？可以采用wezterm + msys2 + 从源码编译neovim的组合技，可以复刻Linux shell中90%的操作。 编译方法见neovim wiki ，大概命令如下： 亲测在Win10上一次编过，编完以后neovim的二进制会install到shell启动默认目录下的nvim-win64/bin内。找不到的话用Everything找一下就行了。加到PATH里即可顺利玩耍。 关于neovim插件 STOP！我说停停，到这里解释一下neovim插件相关的概念，为啥呢？网上教装插件的教程不少，但可能是我太笨吧，看完了也看得云里雾里，包括原生vim的插件也是很迷。 (neo)vim的插件 插件指的是给(neo)vim提供额外功能的“软件”，一般是vimscript（适用于vim）和lua（适用于neovim）编写的，这两种都是脚本语言，下载插件也就是下载源码，一般从github上克隆到指定目录即可。 neovim也可以使用vimscript制作的插件，但是vimscript的效率比较低，装多了卡，而且远不如lua好理解，哪怕一点也不懂lua（比如我），看一看也能照猫画虎写，不推荐在neovim里用太多vimscript编写的插件。 (neo)vim的插件管理器 插件管理器是指提供下载插件、管理插件加载的特殊插件，一般也是从github上安装，直接 `下来就行。 vim-plug 是一款插件管理器，可以用于vim和neovim。在vim上算最好用的插件，但是在neovim里并不推荐，因为它用的是vimscript，和满处lua的neovim有点格格不入。 packer.vim 也是一款插件管理器，可以用于neovim，采用lua编写，配置的可读性强，好上手，neovim上首推。 安装neovim插件 安装packer.vim 先安装插件管理器才方便装插件嘛，直接进行一个命令行的装： 至此，packer安装完成，那么如何通过它管理插件呢？ Linux上neovim会从 `读取配置，用lua写配置就是前者的路径了。 实际上配置路径好像很多，但是用这两个就行。 Windows的配置文件路径以后会补充，现在可以去官网看 先进到 `的文件夹，用来存放我们将要写的lua脚本。 把它想象成“项目根目录”，比如： 我写了一个 `。 没有这个文件夹就自己建一个。 看过一些neovim配置示例，按惯例： `，举个例子： `）加载vim基本配置，举个栗子： 相当于vim的 `里的： 不能说一模一样，只能说完全相同。 `）里面写想加载的插件及其配置，还是举例子： 写好配置了，然后怎么安装呢？ 运行 `即可自动从github上下载插件并把旧插件升到最新版本。 安装LSP neovim安装LSP比较方便，LSP是指\u0026quot;Language Server Protocol\u0026quot;，虽然是协议，可以理解为一种在后台进行静态代码分析的server，提供显示代码错误、代码补全建议的功能，非常好用。 Idea、VS Code太重了，难道我写个demo还要打开这些笨蛋看着内存疯狂上涨吗？ 如果把vim和LSP结合在一起，岂不是双倍快乐？大项目不谈，写个小demo又会带来更多快乐。 neovim可以安装LSP，vim也可以，可惜后者似乎安装有些麻烦，还是前者吧，这也是我想从vim转到neovim的原因之一。 LSP插件组成 虽然叫LSP插件组成，这里实际是想讲整个LSP套件的组成，需要哪些插件。 LSP Server：刚才说了，我们想要的显示代码错误、代码补全建议的功能就是它提供的。 需要指出的是，不同的语言需要启用不同的LSP，比如C/CPP可以用Clangd，Go可以用gopls，Rust可以用rust-analyzer，Python可以用pyright。 需要安装。 LSP Client：大概是处理Server发来的信息呗，这部分不用管，neovim自带整个功能。 不需要安装。 LSP Server管理器：一个neovim插件，可以方便的管理各种LSP Server。 需要安装。 LSP Server下载器：neovim\u0026rsquo;插件，提供下载LSP Server功能。 需要安装。 代码补全建议插件：neovim不带这部分，LSP Server也不包含这部分，所以需要额外下一个neovim插件： 需要安装。 放到今天的示例里，对应关系为： LSP Server：按需下载，列表在nvim-lspconfig的文档 。 LSP Server管理器：nvim-lspconfig 。 LSP Server下载器：mason.vim 。 代码补全建议插件：nvim-cmp 。 最后提供一个示例：realth000/config "],["Hello_hugo","2023年01月01日","/en-us/2023/01/09/hello_hugo.html/","Hello Hugo"]]